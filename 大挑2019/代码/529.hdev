<?xml version="1.0" encoding="UTF-8"?>
<hdevelop file_version="1.1" halcon_version="13.0">
<procedure name="main">
<interface/>
<body>
<c>***********************************************************</c>
<c>*</c>
<c>*Magnetic particle testing  Edition2</c>
<c>*date：2017/05/29</c>
<c>*Designer：nqian</c>
<c>*Image: GrayPointCamera</c>
<c>*</c>
<c>******************************预处理阶段*********************</c>
<l>file_exists ('cifenEdition2.gmc', FileExists)</l>
<l>if (FileExists)</l>
<l>    USE_STORED_CLASSIFIER := 1</l>
<l>else</l>
<l>    USE_STORED_CLASSIFIER := 0</l>
<l>endif</l>
<c></c>
<l>*get_system ('image_dir', HalconImages)</l>
<l>HalconImages:=['C:/Users/Administrator/Desktop/529MTTest']</l>
<l>get_system ('operating_system', OS)//根据halcon系统系统参数获取关于当前信息</l>
<l>if (OS{0:2} == 'Win')</l>
<l>    tuple_split (HalconImages, ';', HalconImages)//在预定义的独立字符间将字符串分离为子链</l>
<l>else</l>
<l>    tuple_split (HalconImages, ':', HalconImages)</l>
<l>endif</l>
<l>ImagePath := '/train/'</l>
<l>ReadOK := false</l>
<l>dev_get_preferences ('suppress_handled_exceptions_dlg', SaveMode)//禁止外部对话框</l>
<l>dev_set_preferences ('suppress_handled_exceptions_dlg', 'true')//算子输入窗口按下回车仿真行为</l>
<l>for k := 0 to |HalconImages| - 1 by 1</l>
<l>    try</l>
<l>        read_image (Image, HalconImages[k] + ImagePath + 'bad/1.jpg')</l>
<l>        ReadPath := HalconImages[k] + ImagePath</l>
<l>        ReadOK := true</l>
<l>        break</l>
<l>    catch (Exception)</l>
<l>    endtry</l>
<l>endfor</l>
<l>if (not ReadOK)</l>
<l>    disp_message (WindowID, 'Could not find the images in $HALCONIMAGES', 'window', 12, 12, 'black', 'true')</l>
<l>    stop ()</l>
<l>endif</l>
<l>dev_set_preferences ('suppress_handled_exceptions_dlg', SaveMode)</l>
<l>read_image (Image, HalconImages+ImagePath + 'bad/1.jpg')</l>
<l>get_image_size (Image, Width, Height)</l>
<l>dev_close_window ()</l>
<l>dev_open_window_fit_image (Image, 0, 0, Width/3, Height/3, WindowID)</l>
<l>set_display_font (WindowID, 16, 'mono', 'true', 'false')</l>
<l>dev_display (Image)</l>
<l>dev_update_off ()</l>
<c></c>
<c></c>
<c>***************************************训练阶段************************************</c>
<c></c>
<l>Classes := ['bad','good']</l>
<c></c>
<l>if (USE_STORED_CLASSIFIER == 1)</l>
<l>    read_class_mlp ('cefenEdition2.gmc', MLPHandle)</l>
<l>    NumClasses := |Classes|</l>
<l>else</l>
<l>    gen_features (Image, FeatureVector)</l>
<l>    NumFeatures := |FeatureVector|</l>
<l>    NumClasses := |Classes|</l>
<l>    NumHidden := 15</l>
<l>    create_class_mlp (NumFeatures, NumHidden, NumClasses, 'softmax', 'normalization', 10, 42, MLPHandle)</l>
<l>    for CorrectClassID := 0 to NumClasses - 1 by 1</l>
<l>        list_files (ReadPath + Classes[CorrectClassID], 'files', Files)</l>
<l>        for k := 0 to |Files| - 1 by 2</l>
<l>            read_image (Image, Files[k])</l>
<l>            decompose3(Image,ImageRed,ImageGreen,ImageBlue)</l>
<l>            emphasize (ImageGreen, Image1, Width, Height, 4)</l>
<l>            *write_image (Image1, 'bmp',0,'f:/')</l>
<l>            *dilation_rectangle1(Image1,Image2,1,1)</l>
<c>            </c>
<l>            *rgb1_to_gray (Image, GrayImage)</l>
<l>            *emphasize(GrayImage,Image1,Width,Height,3)</l>
<l>            *erosion_rectangle1(Image1,Image2,5,5)</l>
<l>            dev_display (Image1)</l>
<l>            gen_features (Image1, FeatureVector)</l>
<l>            add_sample_class_mlp (MLPHandle, FeatureVector, CorrectClassID)</l>
<l>        endfor</l>
<l>    endfor</l>
<l>    train_class_mlp (MLPHandle, 300, 1, 0.0001, Error, ErrorLog)</l>
<l>    write_class_mlp (MLPHandle, 'cefenEdition2.gmc')</l>
<l>    disp_message (WindowID, 'Training of cihen textures completed\nPress \'Run\' to continue', 'window', 12, 12, 'black', 'true')</l>
<l>    stop ()</l>
<l>endif</l>
<c></c>
<c>**************************************************训练样本测试阶段************************************</c>
<l>Errors := 0</l>
<l>Count := 0</l>
<l>ImagePath1 := '/train/'</l>
<l>ReadPath:= HalconImages + ImagePath1</l>
<l>for CorrectClassID := 0 to NumClasses - 1 by 1</l>
<l>    list_files (ReadPath + Classes[CorrectClassID], 'files', Files)</l>
<l>    for k := 0 to |Files| - 1 by 1</l>
<l>        Count := Count + 1</l>
<l>        read_image (Image, Files[k])</l>
<l>        decompose3(Image,ImageRed,ImageGreen,ImageBlue)</l>
<l>        emphasize (ImageGreen, Image1, Width, Height, 4)</l>
<l>        *rgb1_to_gray (Image, GrayImage)</l>
<l>        *emphasize(GrayImage,Image1,Width,Height,3)</l>
<l>        gen_features (Image1, FeatureVector)</l>
<l>        classify_class_mlp (MLPHandle, FeatureVector, 2, FoundClassIDs, Confidence)</l>
<l>        dev_display (Image1)</l>
<l>        dev_set_color ('blue')</l>
<l>        disp_message (WindowID, '正确类别:' + Classes[CorrectClassID], 'window', 12, 12, 'black', 'true')</l>
<l>        if (CorrectClassID == FoundClassIDs[0])</l>
<l>            disp_message (WindowID, '识别类别:' + Classes[FoundClassIDs[0]], 'window', 42, 12, 'forest green', 'true')</l>
<l>        else</l>
<l>            Errors := Errors + 1</l>
<l>            disp_message (WindowID, '识别类型:' + Classes[FoundClassIDs[0]], 'window', 42, 12, 'red', 'true')</l>
<l>            disp_continue_message (WindowID, 'black', 'true')</l>
<l>            *stop ()</l>
<l>        endif</l>
<l>        wait_seconds (0.1)</l>
<l>    endfor</l>
<l>endfor</l>
<l>ErrorRate := real(Errors) / Count * 100.0</l>
<l>disp_message (WindowID, '错误率:= ' + ErrorRate + '%', 'window', 72, 12, 'black', 'true')</l>
<l>disp_end_of_program_message (WindowID, 'black', 'true')</l>
<l>stop()</l>
<c>**************************************************************</c>
<c></c>
<c>******************************************试件样本测试阶段************************************************</c>
<l>ReadPath1 :=[]</l>
<l>Errors1 := 0</l>
<l>Count1 := 0</l>
<l>ImagePath1 := '/test/'</l>
<l>ReadPath1:= HalconImages + ImagePath1</l>
<l>for CorrectClassID := 0 to NumClasses - 1 by 1</l>
<l>    list_files (ReadPath1 + Classes[CorrectClassID], 'files', Files)</l>
<l>    for k := 0 to |Files| - 1 by 1</l>
<l>        Count := Count + 1</l>
<l>        read_image (Image, Files[k])</l>
<l>        decompose3(Image,ImageRed,ImageGreen,ImageBlue)</l>
<l>        emphasize (ImageGreen, Image1, Width, Height, 4)</l>
<l>        *rgb1_to_gray (Image, GrayImage)</l>
<l>        *emphasize(GrayImage,Image1,Width,Height,3)</l>
<l>        gen_features (Image1, FeatureVector)</l>
<l>        classify_class_mlp (MLPHandle, FeatureVector, 2, FoundClassIDs, Confidence)</l>
<l>        dev_display (Image1)</l>
<l>        dev_set_color ('blue')</l>
<l>        disp_message (WindowID, '正确类别:' + Classes[CorrectClassID], 'window', 12, 12, 'black', 'true')</l>
<l>        if (CorrectClassID == FoundClassIDs[0])</l>
<l>            disp_message (WindowID, '识别类别:' + Classes[FoundClassIDs[0]], 'window', 42, 12, 'forest green', 'true')</l>
<l>        else</l>
<l>            Errors := Errors + 1</l>
<l>            disp_message (WindowID, '识别类型:' + Classes[FoundClassIDs[0]], 'window', 42, 12, 'red', 'true')</l>
<l>            disp_continue_message (WindowID, 'black', 'true')</l>
<l>            stop ()</l>
<l>        endif</l>
<l>        wait_seconds (0.1)</l>
<l>    endfor</l>
<l>endfor</l>
<l>ErrorRate := real(Errors) / Count * 100.0</l>
<l>disp_message (WindowID, '错误率:= ' + ErrorRate + '%', 'window', 72, 12, 'black', 'true')</l>
<l>disp_end_of_program_message (WindowID, 'black', 'true')</l>
<l>stop()</l>
<c>**************************************************************</c>
<c as_id="image_acquisition" as_name="Image Acquisition 01" as_grp="[1,1]" as_ord="1">* Image Acquisition 01: Code generated by Image Acquisition 01</c>
<l as_id="image_acquisition" as_name="Image Acquisition 01" as_grp="[1,2]" as_ord="1">list_files ('C:/Users/Administrator/Desktop/cifenEdition2/images/de', ['files','follow_links'], ImageFiles)</l>
<l as_id="image_acquisition" as_name="Image Acquisition 01" as_grp="[1,3]" as_ord="1">tuple_regexp_select (ImageFiles, ['\\.(tif|tiff|gif|bmp|jpg|jpeg|jp2|png|pcx|pgm|ppm|pbm|xwd|ima|hobj)$','ignore_case'], ImageFiles)</l>
<l as_id="image_acquisition" as_name="Image Acquisition 01" as_grp="[2,2]" as_ord="1">for Index := 0 to |ImageFiles| - 1 by 1</l>
<l as_id="image_acquisition" as_name="Image Acquisition 01" as_grp="[2,3]" as_ord="1">    read_image (Image, ImageFiles[Index])</l>
<c as_id="image_acquisition" as_name="Image Acquisition 01" as_grp="[2,4]" as_ord="1">    * Image Acquisition 01: Do something</c>
<l>         decompose3(Image,ImageRed,ImageGreen,ImageBlue)</l>
<l>        emphasize (ImageGreen, Image1, Width, Height, 4)</l>
<l>        *rgb1_to_gray (Image, GrayImage)</l>
<l>        *emphasize(GrayImage,Image1,Width,Height,3)</l>
<l>        gen_features (Image1, FeatureVector)</l>
<l>        classify_class_mlp (MLPHandle, FeatureVector, 2, FoundClassIDs, Confidence)</l>
<l>        dev_display (Image1)</l>
<l>        dev_set_color ('blue')</l>
<l>       * disp_message (WindowID, '正确类别:' + Classes[CorrectClassID], 'window', 12, 12, 'black', 'true')</l>
<l>        if (0 == FoundClassIDs[0])</l>
<l>            disp_message (WindowID, '识别类别:' + Classes[FoundClassIDs[0]], 'window', 42, 12, 'forest green', 'true')</l>
<l>        else</l>
<l>            *Errors := Errors + 1</l>
<l>            disp_message (WindowID, '识别类型:' + Classes[FoundClassIDs[0]], 'window', 42, 12, 'red', 'true')</l>
<l>            disp_continue_message (WindowID, 'black', 'true')</l>
<l>            stop ()</l>
<l>        endif</l>
<l>        stop()</l>
<l as_id="image_acquisition" as_name="Image Acquisition 01" as_grp="[3,1]" as_ord="1">endfor</l>
<c></c>
<c>**************************************************************</c>
<c>****采集图像测试************************</c>
<c as_id="image_acquisition" as_name="Image Acquisition 01" as_grp="[1,1]" as_ord="1">* Image Acquisition 01: Code generated by Image Acquisition 01</c>
<l as_id="image_acquisition" as_name="Image Acquisition 01" as_grp="[1,2]" as_ord="1">list_files ('C:/Users/Administrator/Desktop/cifenEdition2/images/sb', ['files','follow_links'], ImageFiles)</l>
<l as_id="image_acquisition" as_name="Image Acquisition 01" as_grp="[1,3]" as_ord="1">tuple_regexp_select (ImageFiles, ['\\.(tif|tiff|gif|bmp|jpg|jpeg|jp2|png|pcx|pgm|ppm|pbm|xwd|ima|hobj)$','ignore_case'], ImageFiles)</l>
<l as_id="image_acquisition" as_name="Image Acquisition 01" as_grp="[2,2]" as_ord="1">for Index := 0 to |ImageFiles| - 1 by 1</l>
<l as_id="image_acquisition" as_name="Image Acquisition 01" as_grp="[2,3]" as_ord="1">    read_image (Image, ImageFiles[Index])</l>
<c as_id="image_acquisition" as_name="Image Acquisition 01" as_grp="[2,4]" as_ord="1">    * Image Acquisition 01: Do something</c>
<l>     decompose3(Image,ImageRed,ImageGreen,ImageBlue)</l>
<l>        emphasize (ImageGreen, Image1, Width, Height, 4)</l>
<l>        *rgb1_to_gray (Image, GrayImage)</l>
<l>        *emphasize(GrayImage,Image1,Width,Height,3)</l>
<l>        gen_features (Image1, FeatureVector)</l>
<l>        classify_class_mlp (MLPHandle, FeatureVector, 2, FoundClassIDs, Confidence)</l>
<l>        dev_display (Image1)</l>
<l>        dev_set_color ('blue')</l>
<l>       * disp_message (WindowID, '正确类别:' + Classes[CorrectClassID], 'window', 12, 12, 'black', 'true')</l>
<l>        if (0 == FoundClassIDs[0])</l>
<l>            disp_message (WindowID, '识别类别:' + Classes[FoundClassIDs[0]], 'window', 42, 12, 'forest green', 'true')</l>
<l>        else</l>
<l>            *Errors := Errors + 1</l>
<l>            disp_message (WindowID, '识别类型:' + Classes[FoundClassIDs[0]], 'window', 42, 12, 'red', 'true')</l>
<l>            disp_continue_message (WindowID, 'black', 'true')</l>
<l>            stop ()</l>
<l>        endif</l>
<l>        stop()</l>
<c>    </c>
<l as_id="image_acquisition" as_name="Image Acquisition 01" as_grp="[3,1]" as_ord="1">endfor</l>
<c></c>
<c></c>
<c>******************************************************在线检测********************************************</c>
<c>* Image Acquisition 01: Code generated by Image Acquisition 01</c>
<c>* Image Acquisition 01: Code generated by Image Acquisition 01</c>
<l>open_framegrabber ('GenICamTL', 800, 1800, 0, 0, 0, 0, 'progressive', -1, 'default', -1, 'false', 'default', 'MER-500-7UC(RN0036011013)', 0, -1, AcqHandle)</l>
<l>grab_image_start (AcqHandle, -1)</l>
<l>while (true)</l>
<l>    grab_image_async (Image, AcqHandle, -1)</l>
<l>    decompose3(Image,ImageRed,ImageGreen,ImageBlue)</l>
<l>    emphasize (ImageGreen, Image1, Width, Height, 4)</l>
<l>    *rgb1_to_gray (Image, GrayImage)</l>
<l>    *emphasize(GrayImage,Image1,Width,Height,3)</l>
<l>    gen_features (Image1, FeatureVector)</l>
<l>    classify_class_mlp (MLPHandle, FeatureVector, 2, FoundClassIDs, Confidence)</l>
<l>    dev_display (Image1)</l>
<l>    dev_set_color ('blue')</l>
<l>    *disp_message (WindowID, '正确类别:' + Classes[CorrectClassID], 'window', 12, 12, 'black', 'true')</l>
<l>    if (1 == FoundClassIDs[0])</l>
<l>         disp_message (WindowID, '识别类别:' + Classes[FoundClassIDs[0]], 'window', 42, 12, 'forest green', 'true')</l>
<l>    else</l>
<l>         disp_message (WindowID, '识别类型:' + Classes[FoundClassIDs[0]], 'window', 42, 12, 'red', 'true')</l>
<l>         disp_continue_message (WindowID, 'black', 'true')</l>
<l>    endif</l>
<c>    * Image Acquisition 01: Do something</c>
<l>endwhile</l>
<l>close_framegrabber (AcqHandle)</l>
<c></c>
<c></c>
<c></c>
<l>clear_class_mlp (MLPHandle)</l>
<c></c>
</body>
<docu id="main">
<parameters/>
</docu>
</procedure>
<procedure name="gen_features">
<interface>
<io>
<par name="Image" base_type="iconic" dimension="0"/>
</io>
<oc>
<par name="FeatureVector" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>FeatureVector := []</l>
<c>* Compute features.</c>
<l>gen_sobel_features (Image, FeatureVector, FeatureVector)</l>
<c>* Downscale the image (image pyramid) and compute features.</c>
<l>zoom_image_factor (Image, Zoomed1, 0.5, 0.5, 'constant')</l>
<l>gen_sobel_features (Zoomed1, FeatureVector, FeatureVector)</l>
<c>* Uncomment lines to use further pyramid levels:</c>
<l>* zoom_image_factor (Zoomed1, Zoomed2, 0.5, 0.5, 'constant')</l>
<l>* gen_sobel_features (Zoomed2, FeatureVector, FeatureVector)</l>
<l>* zoom_image_factor (Zoomed2, Zoomed3, 0.5, 0.5, 'constant')</l>
<l>* gen_sobel_features (Zoomed3, FeatureVector, FeatureVector)</l>
<l>* zoom_image_factor (Zoomed3, Zoomed4, 0.5, 0.5, 'constant')</l>
<l>* gen_sobel_features (Zoomed4, FeatureVector, FeatureVector)</l>
<l>FeatureVector := real(FeatureVector)</l>
<l>return ()</l>
</body>
<docu id="gen_features">
<short lang="en_US">compute texture features on multiple pyramid levels</short>
<short lang="zh_CN">compute texture features on multiple pyramid levels</short>
<parameters>
<parameter id="FeatureVector"/>
<parameter id="Image"/>
</parameters>
</docu>
</procedure>
<procedure name="gen_sobel_features">
<interface>
<io>
<par name="Image" base_type="iconic" dimension="0"/>
</io>
<ic>
<par name="Features" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="FeaturesExtended" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<c>* Coocurrence matrix for 90 deg:</c>
<l>cooc_feature_image (Image, Image, 6, 90, Energy, Correlation, Homogeneity, Contrast)</l>
<c>* Absolute histogram of edge amplitudes:</c>
<l>sobel_amp (Image, EdgeAmplitude, 'sum_abs', 3)</l>
<l>gray_histo_abs (EdgeAmplitude, EdgeAmplitude, 8, AbsoluteHistoEdgeAmplitude)</l>
<c>* </c>
<c>* You could of course compute more features:</c>
<c>* Entropy and anisotropy:</c>
<l>entropy_gray (Image, Image, Entropy, Anisotropy)</l>
<c>* Absolute histogram of gray values:</c>
<l>gray_histo_abs (Image, Image, 8, AbsoluteHistoImage)</l>
<c>* Add features to feature vector:</c>
<l>FeaturesExtended := [Features,Energy,Correlation,Homogeneity,Contrast]</l>
<l>FeaturesExtended := [FeaturesExtended,AbsoluteHistoEdgeAmplitude]</l>
<c>* Activate the following lines to add the additional features you activated:</c>
<l>FeaturesExtended := [FeaturesExtended,Entropy,Anisotropy]</l>
<l>FeaturesExtended := [FeaturesExtended,AbsoluteHistoImage]</l>
<l>return ()</l>
</body>
<docu id="gen_sobel_features">
<short lang="en_US">compute various texture features and append them to input feature vector</short>
<short lang="zh_CN">compute various texture features and append them to input feature vector</short>
<parameters>
<parameter id="Features"/>
<parameter id="FeaturesExtended"/>
<parameter id="Image"/>
</parameters>
</docu>
</procedure>
</hdevelop>
